<?php/** * @version     1.0.0 * @package     com_jm_slider_revolution * @copyright   Copyright (C) 2014. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt * @author      JoomlaMan <support@joomlaman.com> - http://JoomlaMan.com */// No direct accessdefined('_JEXEC') or die;jimport('joomla.application.component.view');/** * View to edit */class Jm_slider_revolutionViewSlider extends RSliderView {    /**     * Display the view     */    public function display($tpl = null) {        $data = isset($_POST['data'])?$_POST['data']:null;		$action = JRequest::getVar('action');		$msg = null;		$url = null;		$success = false;		$result = null;		$state = null;		$csscontent = null;		$is_redirect = false;		$sliderTemplate = false;		$slider = new RevSlider();		$slide = new RevSlide();		$operations = new RevOperations();		$UniteFunctionsRev = new UniteFunctionsRev();		$UniteBaseAdminClassRev = new UniteBaseAdminClassRev();		$settingsSliderParams = new UniteSettingsProductSidebarRev();		$settingsSliderMain = new RevSliderSettingsProduct();		try{			switch($action){				case 'add_google_fonts':				break;				case 'remove_google_fonts':				break;				case 'edit_google_fonts':				break;				case "export_slider":					$sliderID = JRequest::getVar("sliderid");					$dummy = JRequest::getVar("dummy");					$slider->initByID($sliderID);					$slider->exportSlider($dummy);				break;				case "import_slider":					$updateAnim = JRequest::getVar("update_animations");					$updateStatic = JRequest::getVar("update_static_captions");					$UniteFunctionsRev::importSliderHandle(null, $updateAnim, $updateStatic);				break;				case "import_slider_slidersview":					$viewBack = self::getViewUrl(self::VIEW_SLIDERS);					$updateAnim = self::getPostGetVar("update_animations");					$updateStatic = self::getPostGetVar("update_static_captions");					self::importSliderHandle($viewBack, $updateAnim, $updateStatic);				break;				case "create_slider":					$UniteBaseAdminClassRev::requireSettings("slider_settings");					$settingsMain = $UniteBaseAdminClassRev::getSettings("slider_main");					$settingsParams = $UniteBaseAdminClassRev::getSettings("slider_params");					$data = $operations->modifyCustomSliderParams($data);					$newSliderID = $slider->createSliderFromOptions($data,$settingsMain,$settingsParams); 					$msg = "The slider successfully created";					$url = $UniteFunctionsRev::getViewUrl();					$success = true;					$is_redirect = true;				break;				case "update_slider":					$UniteBaseAdminClassRev::requireSettings("slider_settings");					$settingsMain = $UniteBaseAdminClassRev::getSettings("slider_main");					$settingsParams = $UniteBaseAdminClassRev::getSettings("slider_params");					$data = $operations->modifyCustomSliderParams($data);					$slider->updateSliderFromOptions($data,$settingsMain,$settingsParams);					$msg = "The slider successfully updated";					$success = true;				break;				case "delete_slider":					$isDeleted = $slider->deleteSliderFromData($data);					if(is_array($isDeleted)){						$isDeleted = implode(', ', $isDeleted);						$msg = "Template can't be deleted, it is still being used by the following Sliders: ".$isDeleted;					}else{						$msg = "The slider deleted";						$url = $UniteFunctionsRev::getViewUrl();						$success = true;						$is_redirect = true;					}				break;				case "duplicate_slider":					$slider->duplicateSliderFromData($data);					$msg = "The duplicate successfully, refreshing page...";					$url = $UniteFunctionsRev::getViewUrl();					$success = true;					$is_redirect = true;				break;				case "add_slide":					$numSlides = $slider->createSlideFromData($data);					$sliderID = $data["sliderid"];					if($numSlides == 1){						$msg = "Slide Created";					} else {						$msg = $numSlides . " Slides Created";					}					$url = $UniteFunctionsRev::getViewUrl($sliderID,'default','slides');					$is_redirect = true;					$success = true;				break;				case "add_slide_fromslideview":					$slideID = $slider->createSlideFromData($data,true);					$urlRedirect = $UniteFunctionsRev::getViewUrl($slideID,'edit','slide');					$url = $UniteFunctionsRev::getViewUrl($slideID,'edit','slide');					$msg = "Slide Created, redirecting...";					$success = true;					$is_redirect = true;				break;				case "update_slide":					require $UniteBaseAdminClassRev::getSettingsFilePath("slide_settings");					$slide->updateSlideFromData($data,$slideSettings);					$msg = "Slide updated";					$success = true;				break;				case "update_static_slide":					$slide->updateStaticSlideFromData($data);					$msg = "Static Layers updated";				break;				case "delete_slide":					$isPost = $slide->deleteSlideFromData($data);					if($isPost)						$msg = "Post Deleted Successfully";					else						$msg = "Slide Deleted Successfully";					$sliderID = $UniteFunctionsRev::getVal($data, "sliderID");					$url = $UniteFunctionsRev::getViewUrl($sliderID,'default','slides');					$success = true;					$is_redirect = true;				break;				case "duplicate_slide":					$sliderID = $slider->duplicateSlideFromData($data);					$msg = "Slide Duplicated Successfully";					$url = $UniteFunctionsRev::getViewUrl($sliderID,'default','slides');					$success = true;					$is_redirect = true;				break;				case "copy_move_slide":					$sliderID = $slider->copyMoveSlideFromData($data);					$msg = "The operation successfully, refreshing page...";					$url = $UniteFunctionsRev::getViewUrl($sliderID,'default','slides');					$is_redirect = true;					$success = true;				break;				case "get_static_css":					$contentCSS = $operations->getStaticCss();					$result = $contentCSS;					$success = true;				break;				case "get_dynamic_css":					$result = $operations->getDynamicCss();					$success = true;				break;				case "insert_captions_css":					$result = $operations->insertCaptionsContentData($data);					$msg = "CSS saved succesfully!";					$csscontent = $operations->getCaptionsContent();					$success = true;				break;				case "update_captions_css":					$result = $operations->updateCaptionsContentData($data);					$msg = "CSS saved succesfully!";					$csscontent = $operations->getCaptionsContent();					$success = true;				break;				case "delete_captions_css":					$arrCaptions = $operations->deleteCaptionsContentData($data);					$msg = "Style deleted succesfully!";					$result = $arrCaptions;					$csscontent = $operations->getCaptionsContent();					$success = true;				break;				case "update_static_css":					$staticCss = $operations->updateStaticCss($data);					$msg = "CSS saved succesfully!";					$result = $staticCss;					$success = true;				break;				case "insert_custom_anim":					$arrAnims = $operations->insertCustomAnim($data); 					$msg = "Animation saved succesfully!";					$success = true;				break;				case "update_custom_anim":					$arrAnims = $operations->updateCustomAnim($data);					$msg = "Animation saved succesfully!";					$success = true;				break;				case "delete_custom_anim":					$arrAnims = $operations->deleteCustomAnim($data);					$msg = "Animation saved succesfully!";					$success = true;				break;				case "update_slides_order":					$slider->updateSlidesOrderFromData($data);					$msg = "Order updated successfully";					$success = true;				break;				case "change_slide_image":					$slide->updateSlideImageFromData($data);					$sliderID = $UniteFunctionsRev::getVal($data, "slider_id");					$msg = "Slide Changed Successfully";					$success = true;				break;				case "preview_slide":					$operations->putSlidePreviewByData($data);				break;				case "preview_slider":					$sliderID = JRequest::getVar("sliderid");					$do_markup = JRequest::getVar("only_markup");					if($do_markup == 'true')						$operations->previewOutputMarkup($sliderID);					else						$operations->previewOutput($sliderID);				break;				case "toggle_slide_state":					$state = $slide->toggleSlideStatFromData($data);					$success = true; 				break;				case "slide_lang_operation":					$responseData = $slide->doSlideLangOperation($data);				break;				case "update_plugin":									break;				case "update_text":					self::updateSettingsText();					$msg = "All files successfully updated";					$success = true;				break;				case "update_general_settings":					$operations->updateGeneralSettings($data);					$msg = "General settings updated";					$success = true;				break;				case "update_posts_sortby":					$slider->updatePostsSortbyFromData($data);					$msg = "Sortby updated";					$success = true;				break;				case "replace_image_urls":					$slider->replaceImageUrlsFromData($data);					$msg = "Image urls replaced";					$success = true;				break;				case "reset_slide_settings":					$slider->resetSlideSettings($data);					$msg = "Settings in all Slides changed";					$success = true;				break;				default:					$msg = "wrong ajax action: $action ";					echo -1; exit();				break;			}		}		catch(Exception $e){			$message = $e->getMessage();			if($action == "preview_slide" || $action == "preview_slider"){				echo $message;				exit();			}			$msg = $message;		}		$results = array(		'success' => $success,		'state' => $state,		'csscontent' => $csscontent,		'data' => $result,		'message' => $msg,		'is_redirect' => $is_redirect,		'redirect_url' => $url,		);		echo json_encode($results);		exit();    }}